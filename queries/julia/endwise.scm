((struct_definition name: (_) @cursor type_parameters: (_)? @cursor (subtype_clause (_) @cursor)?) @endable @indent (#endwise! "end"))
((function_definition name: (_) parameters: (_) @cursor (quote_expression (quote_expression (identifier)))? @cursor) @endable @indent (#endwise! "end"))
((macro_definition name: (_) parameters: (_) @cursor) @endable @indent (#endwise! "end"))
((module_definition name: (_) @cursor) @endable @indent (#endwise! "end"))
((let_statement (variable_declaration (_) @cursor .) .) @endable @indent (#endwise! "end"))
((if_statement condition: (_) @cursor) @endable @indent (#endwise! "end"))
((for_statement (for_binding (_) @cursor .)) @endable @indent (#endwise! "end"))
((while_statement condition: (_) @cursor) @endable @indent (#endwise! "end"))
((try_statement "try" @cursor) @endable @indent (#endwise! "end"))
((quote_statement "quote" @cursor) @endable @indent (#endwise! "end"))
((do_clause "do" @cursor . (identifier)? @cursor . (tuple_expression)? @cursor . (bare_tuple_expression)? @cursor) @endable @indent (#endwise! "end"))

("struct" @indent . (identifier) @cursor (type_parameter_list)? @cursor (subtype_clause (_) @cursor)? (#endwise! "end"))
("function" @indent . (identifier) . (parameter_list) @cursor (quote_expression (quote_expression (identifier)))? @cursor (#endwise! "end"))
("macro" @indent . (identifier) . (parameter_list) @cursor (#endwise! "end"))
("module" @indent . (identifier) @cursor (#endwise! "end"))
("let" @indent (variable_declaration (_) @cursor .) (#endwise! "end"))
("if" @indent . (binary_expression (_) @cursor .) (#endwise! "end"))
("for" @indent . (for_binding (_) @cursor .) (#endwise! "end"))
("while" @indent . (binary_expression (_) @cursor .) (#endwise! "end"))
("try" @indent @cursor (#endwise! "end"))
("quote" @indent @cursor (#endwise! "end"))
("begin" @indent @cursor (#endwise! "end"))
("do" @indent @cursor . [(bare_tuple_expression) (identifier) (parenthesized_expression)] @cursor (#endwise! "end"))
("do" @indent @cursor (#endwise! "end"))
